{"version":3,"sources":["components/Joke.js","components/JokeHeader.js","components/JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","react_default","a","createElement","className","getEmoji","text","onClick","upvote","style","borderColor","getColor","downvote","Component","JokeHeader","_ref","data-title","JokeList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","map","joke","console","log","handleButtonClick","bind","assertThisInitialized","length","getJokes","numJokesToGet","axios","get","headers","Accept","response","newJoke","data","has","push","id","uuid","setState","st","concat","toConsumableArray","setItem","stringify","_this2","alert","_context","t0","delta","_this3","objectSpread","_this4","Fragment","components_JokeHeader","sort","b","components_Joke","key","handleVote","defaultProps","App","src","alt","components_JokeList","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53a4cc1c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../style/Joke.css\";\n\nclass Joke extends Component {\n  getColor() {\n    if (this.props.votes >= 15) {\n      return \"#4CAF50\";\n    } else if (this.props.votes >= 12) {\n      return \"#8BC34A\";\n    } else if (this.props.votes >= 9) {\n      return \"#CDDC39\";\n    } else if (this.props.votes >= 6) {\n      return \"#FFEB3B\";\n    } else if (this.props.votes >= 3) {\n      return \"#FFC107\";\n    } else if (this.props.votes >= 0) {\n      return \"#FF9800\";\n    } else {\n      return \"#F44336\";\n    }\n  }\n\n  getEmoji() {\n    if (this.props.votes >= 15) {\n      return \"em em-rolling_on_the_floor_laughing\";\n    } else if (this.props.votes >= 12) {\n      return \"em em-laughing\";\n    } else if (this.props.votes >= 9) {\n      return \"em em-smiley\";\n    } else if (this.props.votes >= 6) {\n      return \"em em-slightly_smiling_face\";\n    } else if (this.props.votes >= 3) {\n      return \"em em-neutral_face\";\n    } else if (this.props.votes >= 0) {\n      return \"em em-confused\";\n    } else {\n      return \"em em-angry\";\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"joke\">\n        <div className=\"joke__emoji\">\n          <i className={this.getEmoji()} />\n        </div>\n        <div className=\"joke__text\">{this.props.text}</div>\n        <div className=\"joke__buttons\">\n          <i className=\"fas fa-thumbs-up\" onClick={this.props.upvote} />\n          <span\n            className=\"joke__buttons--vote\"\n            style={{ borderColor: this.getColor() }}\n          >\n            {this.props.votes}\n          </span>\n          <i className=\"fas fa-thumbs-down\" onClick={this.props.downvote} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Joke;\n","import React from \"react\";\nimport \"../style/JokeHeader.css\";\n\nconst JokeHeader = ({ onClick }) => {\n  return (\n    <div className=\"sidebar\">\n      <h1 className=\"sidebar__title\">\n        <span>Funny</span> Jokes\n      </h1>\n      <div className=\"sidebar__content\">\n        <button data-title=\"\" className=\"sidebar__button\" onClick={onClick}>\n          Add New Jokes\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default JokeHeader;\n","import React, { Component } from \"react\";\nimport Joke from \"./Joke\";\nimport axios from \"axios\";\nimport uuid from \"uuid/v4\";\nimport \"../style/JokeList.css\";\nimport JokeHeader from \"./JokeHeader\";\n\nclass JokeList extends Component {\n  static defaultProps = {\n    numJokesToGet: 10\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\n      loading: false\n    };\n    this.seenJokes = new Set(this.state.jokes.map(joke => joke.text));\n    console.log(this.seenJokes);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n  }\n  componentDidMount() {\n    if (this.state.jokes.length === 0) this.getJokes();\n  }\n\n  async getJokes() {\n    try {\n      let jokes = [];\n      while (jokes.length < this.props.numJokesToGet) {\n        let response = await axios.get(\"https://icanhazdadjoke.com/\", {\n          headers: { Accept: \"application/json\" }\n        });\n\n        let newJoke = response.data.joke;\n        if (!this.seenJokes.has(newJoke)) {\n          jokes.push({ id: uuid(), text: newJoke, votes: 0 });\n        } else {\n          console.log(\"FOUND A DUPLICATE\");\n          console.log(newJoke);\n        }\n      }\n      this.setState(\n        st => ({\n          loading: false,\n          jokes: [...st.jokes, ...jokes]\n        }),\n        () =>\n          window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\n      );\n    } catch (e) {\n      alert(e);\n      this.setState({ loading: false });\n    }\n  }\n\n  handleVote(id, delta) {\n    this.setState(\n      st => ({\n        jokes: st.jokes.map(joke =>\n          joke.id === id ? { ...joke, votes: joke.votes + delta } : joke\n        )\n      }),\n      // whis will be called after setState finishes:\n      () =>\n        window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\n    );\n  }\n\n  handleButtonClick() {\n    // We set callback to setState which will run after setState finishes:\n    this.setState({ loading: true }, this.getJokes);\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <>\n          <JokeHeader onClick={this.handleButtonClick} />\n          <div className=\"jokes\">\n            <div className=\"jokes__spinner\">\n              <i className=\"far fa-8x fa-laugh fa-spin\" />\n              <h1>Loading...</h1>\n            </div>\n          </div>\n        </>\n        // <div className=\"spinner\">\n        //   <i className=\"far fa-8x fa-laugh fa-spin\" />\n        //   <h1 className=\"sidebar-title\">Loading...</h1>\n        // </div>\n      );\n    }\n    let jokes = this.state.jokes.sort((a, b) => b.votes - a.votes);\n    return (\n      <>\n        <JokeHeader onClick={this.handleButtonClick} />\n        <div className=\"jokes\">\n          {jokes.map(joke => (\n            <Joke\n              key={joke.id}\n              votes={joke.votes}\n              text={joke.text}\n              upvote={() => this.handleVote(joke.id, 1)}\n              downvote={() => this.handleVote(joke.id, -1)}\n            />\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default JokeList;\n","import React from \"react\";\nimport JokeList from \"./components/JokeList\";\nimport \"./style/App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <img\n        src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\"\n        alt=\"icon\"\n      />\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}